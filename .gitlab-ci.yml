image: docker:24.0.7

services:
  - docker:24.0.7-dind

variables:
  DOCKER_TLS_CERTDIR: ""
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:latest"

stages:
  - build
  - test
  - push
  - deploy

before_script:
  - apk add --no-cache git curl
  - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

build:
  stage: build
  script:
    - echo "ðŸ”¨ Building image: $IMAGE_TAG"
    - docker build -t "$IMAGE_TAG" .
  only:
    - main

test:
  stage: test
  image: php:8.2
  services:
    - mysql:8.0
  variables:
    DB_HOST: mysql
    DB_DATABASE: akaunting_test
    DB_USERNAME: root
    DB_PASSWORD: akaunting
  before_script:
    - apt-get update && apt-get install -y unzip git curl
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install
    - cp .env.example .env
    - php artisan key:generate
    - php artisan migrate --force
  script:
    - php artisan test
  only:
    - main

push:
  stage: push
  script:
    - echo "ðŸš€ Pushing image: $IMAGE_TAG"
    - docker push "$IMAGE_TAG"
  only:
    - main

deploy:
  stage: deploy
  image: alpine:3.20
  before_script:
    - apk add --no-cache openssh
  script:
    - echo "ðŸš€ Deploying to $DEPLOY_SERVER"
    - >
      ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER "
      cd /home/$DEPLOY_USER/devops-training &&
      git pull origin main &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose up -d --build &&
      docker exec akaunting_app php artisan migrate --force
      "
  only:
    - main
